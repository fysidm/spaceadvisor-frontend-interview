{"version":3,"sources":["features/calculator/Calculator.module.css","features/calculator/calculatorSlice.js","features/calculator/consts.js","utils/useWindowDimensions.js","features/calculator/Calculator.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","calculatorSlice","createSlice","name","initialState","value","display","reducers","toggleDisplay","state","action","plus","payload","minus","setValue","actions","selectCalculator","calculator","panelList","items","text","backgroundColor","isOperator","operator","isDisabled","grow","getWindowDimensions","window","width","innerWidth","height","innerHeight","Calculator","useState","enteringValue","setEnteringValue","prevOp","setPrevOp","useSelector","dispatch","useDispatch","modal","document","getElementById","isMobile","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","onclick","e","target","id","className","styles","style","disabled","handle","calculatorContainer","calculatorContainerM","calculatorResult","calculatorPanel","map","index","key","panelButtonRow","item","panelButton2x","panelButton","onClick","operation","Number","toString","console","log","App","configureStore","reducer","calculatorReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.568a3df1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Calculator_modal__1Mhb1\",\"calculatorContainer\":\"Calculator_calculatorContainer__1TCse\",\"calculatorContainerM\":\"Calculator_calculatorContainerM__M8h83 Calculator_calculatorContainer__1TCse\",\"calculatorPanel\":\"Calculator_calculatorPanel__P4Z-L\",\"panelButtonRow\":\"Calculator_panelButtonRow__3sgaB\",\"panelButton\":\"Calculator_panelButton__3a1oK\",\"panelButton2x\":\"Calculator_panelButton2x__1sN-3 Calculator_panelButton__3a1oK\"};","import { createSlice } from '@reduxjs/toolkit';\n\nexport const calculatorSlice = createSlice({\n  name: 'calculator',\n  initialState: {\n    value: 0,\n    display: false\n  },\n  reducers: {\n    toggleDisplay: (state, action) => {\n      state.display = !state.display;\n    },\n    plus: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += action.payload;\n    },\n    minus: (state, action) => {\n      state.value -= action.payload;\n    },\n    setValue: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { plus, minus, toggleDisplay, setValue } = calculatorSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.calculator.value)`\nexport const selectCalculator = state => state.calculator;\n\nexport default calculatorSlice.reducer;\n","export const panelList = [\n  {\n    items: [\n      {\n        text: 'AC',\n        backgroundColor: '#afafaf',\n        isOperator: true,\n        operator: 'all_clear',\n      },\n      {\n        text: '+/-',\n        backgroundColor: '#afafaf',\n        isDisabled: true,\n        isOperator: true,\n        operator: 'positive_negative_switch',\n      },\n      {\n        text: '%',\n        backgroundColor: '#afafaf',\n        isDisabled: true,\n        isOperator: true,\n        operator: 'mod',\n      },\n      {\n        text: 'รท',\n        backgroundColor: '#3091fd',\n        isDisabled: true,\n        isOperator: true,\n        operator: 'divid',\n      },\n    ]\n  },\n  {\n    items: [\n      {\n        text: '7',\n      },\n      {\n        text: '8',\n      },\n      {\n        text: '9',\n      },\n      {\n        text: 'x',\n        backgroundColor: '#3091fd',\n        isDisabled: true,\n        isOperator: true,\n        operator: 'multiply',\n      },\n    ]\n  },\n  {\n    items: [\n      {\n        text: '4',\n      },\n      {\n        text: '5',\n      },\n      {\n        text: '6',\n      },\n      {\n        text: '-',\n        isOperator: true,\n        operator: 'minus',\n        backgroundColor: '#3091fd',\n      },\n    ]\n  },\n  {\n    items: [\n      {\n        text: '1',\n      },\n      {\n        text: '2',\n      },\n      {\n        text: '3',\n      },\n      {\n        text: '+',\n        isOperator: true,\n        operator: 'plus',\n        backgroundColor: '#3091fd',\n      },\n    ]\n  },\n  {\n    items: [\n      {\n        text: '0',\n        grow: 2\n      },\n      {\n        text: '.',\n        isDisabled: true,\n        isOperator: true,\n        operator: 'add_dot',\n      },\n      {\n        text: '=',\n        isOperator: true,\n        operator: 'equal',\n        backgroundColor: '#3091fd',\n      },\n    ]\n  },\n];\n","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Draggable from 'react-draggable';\nimport {\n  plus,\n  minus,\n  toggleDisplay,\n  setValue,\n  selectCalculator,\n} from './calculatorSlice';\nimport styles from './Calculator.module.css';\nimport { panelList } from './consts';\nimport useWindowDimensions from '../../utils/useWindowDimensions';\n\nexport function Calculator() {\n  const [enteringValue, setEnteringValue] = useState('0');\n  const [prevOp, setPrevOp] = useState();\n  const {value, display} = useSelector(selectCalculator);\n  const dispatch = useDispatch();\n  const modal = document.getElementById(\"calculator-modal\");\n  const { width } = useWindowDimensions();\n  const isMobile = width <= 425;\n\n  window.onclick = (e) => {\n    if (e.target === modal) {\n      return dispatch(toggleDisplay());\n    }\n  };\n\n  return (\n    <div\n      id={'calculator-modal'}\n      className={styles.modal}\n      style={{display: display ? 'block' : 'none'}}\n    >\n      <Draggable disabled={isMobile} handle={`.${styles.calculatorContainer}`}>\n        <div className={isMobile ? styles.calculatorContainerM : styles.calculatorContainer}>\n          <div className={styles.calculatorResult}>\n            {enteringValue}\n          </div>\n          <div className={styles.calculatorPanel}>\n            {\n              panelList.map(({items}, index) => {\n                return (\n                  <div\n                    key={`panel-button-row-${index}`}\n                    className={styles.panelButtonRow}\n                  >\n                    {\n                      items.map((item, index) => {\n                        const {\n                          grow,\n                          backgroundColor,\n                          text,\n                          isDisabled,\n                          isOperator,\n                          operator\n                        } = item;\n\n                        return (\n                          <div\n                            disabled={isDisabled}\n                            key={`panel-button-row-${index}`}\n                            className={!!grow ? styles.panelButton2x : styles.panelButton}\n                            style={{\n                              backgroundColor: !!backgroundColor ? backgroundColor : '#333',\n                            }}\n                            onClick={() => {\n                              if (isOperator) {\n                                if (!isDisabled) {\n                                  operation(operator, prevOp, enteringValue, value, dispatch, setEnteringValue, setPrevOp);\n                                }\n                              } else {\n                                if (prevOp === 'equal') {\n                                  setEnteringValue(text);\n                                  setPrevOp('new');\n                                } else {\n                                  if (enteringValue === '0') {\n                                    setEnteringValue(text);\n                                  } else {\n                                    setEnteringValue(enteringValue + text);\n                                  }\n                                }\n                              }\n                            }}\n                          >\n                            {text}\n                          </div>\n                        );\n                      })\n                    }\n                  </div>\n                );\n              })\n            }\n          </div>\n        </div>\n      </Draggable>\n    </div>\n  );\n}\n\nconst operation = (operator, prevOp, enteringValue, value, dispatch, setEnteringValue, setPrevOp) => {\n  switch (operator) {\n    case 'plus':\n    case 'minus':\n      if (prevOp === 'minus') {\n        dispatch(minus(Number(enteringValue)));\n      } else if (prevOp === 'plus') {\n        dispatch(plus(Number(enteringValue)));\n      } else {\n        dispatch(setValue(Number(enteringValue)))\n      }\n      setEnteringValue('0');\n      break;\n    case 'equal':\n      if (!prevOp || prevOp === 'new') {\n        dispatch(setValue(Number(enteringValue)));\n      } else {\n        if (prevOp === 'plus') {\n          dispatch(plus(Number(enteringValue)));\n          setEnteringValue((value + Number(enteringValue)).toString());\n        } else if (prevOp === 'minus') {\n          dispatch(minus(Number(enteringValue)));\n          setEnteringValue((value - Number(enteringValue)).toString());\n        } else {\n          setEnteringValue(value.toString());\n        }\n      }\n      break;\n    case 'all_clear':\n      dispatch(setValue(0));\n      setEnteringValue('0');\n      break;\n    default:\n      console.log('oh no');\n  }\n  setPrevOp(operator);\n}\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Calculator } from './features/calculator/Calculator';\r\nimport { toggleDisplay } from './features/calculator/calculatorSlice';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button className='open-button' onClick={() => dispatch(toggleDisplay())}>\r\n        Open Calculator\r\n      </button>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport calculatorReducer from '../features/calculator/calculatorSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    calculator: calculatorReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}